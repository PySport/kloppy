# ━━━━━━━━━━━━━━━━━━━━━━━━━━ Build System ━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Project ━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[project]
name = "kloppy"
version = "3.16.0"
description = "Standardizing soccer tracking- and event data"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
authors = [
    { name = "Koen Vossen", email = "info@koenvossen.nl" }
]
keywords = ["soccer", "tracking data", "event data", "sports analytics"]
classifiers = [
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: BSD License",
]

# ━━━━━━━━━━━━━━━━━━━━━━ Primary Dependencies ━━━━━━━━━━━━━━━━━━━━━━ #

requires-python = ">=3.9"
dependencies = [
    "lxml>=4.4.0",
    "typing_extensions; python_version < '3.11'",
    "sortedcontainers>=2",
    "fsspec[http]>=2024.12.0",
    "pytz>=2025.2",
    "python-dateutil>=2.9.0.post0",
]

[project.optional-dependencies]
query = ["networkx>=2.4,<3"]
s3 = [ "fsspec[s3]" ]
pandas = [ "pandas>=2.0.3" ]
polars = [ "polars>=0.16.6" ]
pyarrow = [ "pyarrow>=17.0.0" ]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Scripts ━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[project.scripts]
kloppy-query = "kloppy.cmdline:run_query"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━ PyPi URLS ━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[project.urls]
Repository = "https://github.com/PySport/kloppy"
Documentation = "https://kloppy.pysport.org/"

# ━━━━━━━━━━━━━━━━━━━━━━━ Extra Dependencies ━━━━━━━━━━━━━━━━━━━━━━━ #

[dependency-groups]
dev = [
    "ruff>=0.11.8",                      # Python linter and formatter
    "pyright>=1.1.400",                  # Static type checker
    "pytest>=6.2.5,<8",                  # Testing framework
    "pytest-lazy-fixture>=0.6.3",        # Use fixtures as parameters in pytest
    "pytest-httpserver",                 # Mock HTTP server for testing
    "moto[s3,server]",                   # Mock AWS S3 for testing
    "pre-commit>=4.2.0",                 # Git hooks for code quality checks
]

docs = [
    "mkdocs>=1.6.1",                     # Documentation generator
    "mkdocs-material>=9.5.44",           # Material design theme for MkDocs
    "mkdocs-material-extensions==1.3.1", # Extra features for MkDocs Material theme
    "mkdocstrings-python==1.12.2",       # Auto-generate API docs from Python docstrings
    "griffe-generics==1.0.13",           # Extension for parsing types in docs
    "markdown-exec[ansi]>=1.10.3",       # Run and render code blocks in Markdown
    "mkdocs-autorefs==1.2.0",            # Automatic cross-referencing for MkDocs
    "mkdocs-exclude==1.0.2",             # Exclude files/folders from MkDocs builds
    "mkdocs-jupyter==0.24.7",            # Embed Jupyter notebooks in MkDocs
    "mkdocs-macros-plugin==1.0.5",       # Template macros for MkDocs
    "mplsoccer==1.3.0",                  # Soccer plotting package (used in docs)
    "pandas[output-formatting]>=2.2.3",  # Output formatting for dataframes
]

nb = [
    "ipykernel>=6.29.5",                 # Jupyter kernel runtime environment
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ uv ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[tool.uv]
package = true
default-groups = ["dev", "docs", "nb"]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Ruff ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[tool.ruff]
target-version = "py39"
line-length = 120  # use whatever number makes you happy
format = { quote-style = "double", indent-style = "space" }
exclude = [
    "examples",
    "docs/presentations",
]

[tool.ruff.lint]
# TODO: starting with a limited set of rules, but we'll probably add more later
# you can see the looong list of rules here: https://docs.astral.sh/ruff/rules/
# select = ["ALL"]
select = [
    "A",    # warn about shadowing built-ins
    "E",    # style stuff, whitespaces
    "F",    # important pyflakes lints
    "I",    # import sorting
    "T100", # breakpoints (probably don't want these in prod!)
]
ignore = [
    "E501",  # line too long
    "E731",  # do not assign a lambda expression, use a def
    "A005",  # do not shadow a Python standard library module
]

mccabe.max-complexity = 10
pycodestyle.max-doc-length = 99
pydocstyle.convention = "google"
isort = { known-first-party = ["kloppy"], force-sort-within-sections = true }

[tool.ruff.lint.per-file-ignores]
"kloppy/**/__init__.py" = [
    "F401",  # Allow unused imports in __init__.py
    "F403",  # Allow redefinition of 'from ... import *' in __init__.py
]
"kloppy/event_pattern_matching.py" = [
    "F403",  # Allow redefinition of 'from ... import *' in event_pattern_matching.py
]


# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Pyright ━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[tool.pyright]
venvPath = "."          # uv installs the venv in the current dir
venv = ".venv"          #       in a folder called `.venv`
# strict = ["**/*.py"]    # use 'strict' checking on all files
include = [ "kloppy" ]
exclude = [
    "**/__pycache__",
    ".venv",
]
pythonVersion = "3.9"   # specify the _lowest_ you support

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Pytest ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[tool.pytest.ini_options]
testpaths = ["kloppy/tests"]
addopts = "--tb=long --code-highlight=yes --doctest-modules"
